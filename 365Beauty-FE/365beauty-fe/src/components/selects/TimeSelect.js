import React, { useState, useEffect } from "react";
import { Form, Select } from "antd";
import { getDetailServiceCatalogs } from "../../apis/services/serviceCatalog";
import useTimeData from "../../hooks/bookings/timeData";
import { getDetailTime } from "../../apis/bookings/times";

const { Option } = Select;

export const TimeSelectMutiple = ({ onTimeSelect, timeId }) => {
    const [selectedTime, setSelectedTime] = useState([]); // üõ† L∆∞u tr·ªØ m·∫£ng d·ªãch v·ª•
    const { data, loading, fetchData } = useTimeData();
    const [detailLoading, setDetailLoading] = useState(false);

    // Fetch danh s√°ch d·ªãch v·ª• khi component mount
    useEffect(() => {
        fetchData();
    }, []);

    useEffect(() => {
        if (!timeId || timeId.length === 0) return;  // N·∫øu kh√¥ng c√≥ `timeId` th√¨ kh√¥ng fetch

        const fetchTimeDetails = async () => {
            setDetailLoading(true);
            try {
                const responses = await Promise.all(timeId.map((id) => getDetailTime(id)));  // üõ† L·∫•y chi ti·∫øt t·ª´ng `timeId`
                const ids = responses.map((response) => response?.data?.id).filter(Boolean);  // üõ† L·ªçc ra c√°c ID h·ª£p l·ªá
                setSelectedTime(ids);  // üõ† C·∫≠p nh·∫≠t m·∫£ng `selectedTime` n·∫øu c√≥ d·ªØ li·ªáu
            } catch (error) {
                console.error("L·ªói khi l·∫•y chi ti·∫øt th·ªùi gian:", error);
            } finally {
                setDetailLoading(false);
            }
        };

        fetchTimeDetails();
    }, [timeId]);

    // Khi ch·ªçn d·ªãch v·ª• -> C·∫≠p nh·∫≠t state & g·ªçi callback
    const handleTimeChange = (timeId) => {
        setSelectedTime(timeId);         // üõ† L∆∞u tr·ªØ m·∫£ng c√°c d·ªãch v·ª• ƒë√£ ch·ªçn
        onTimeSelect(timeId);             // üõ† Tr·∫£ v·ªÅ m·∫£ng c√°c `serviceId`
    };

    return (
        <Form.Item label="Ch·ªçn th·ªùi gian" style={{ fontWeight: 500, margin: 3 }}>
            <Select
                mode="multiple"                        // üõ† Cho ph√©p ch·ªçn nhi·ªÅu d·ªãch v·ª•
                placeholder="Ch·ªçn th·ªùi gian"
                loading={loading || detailLoading}
                onChange={handleTimeChange}
                value={selectedTime}               // üõ† S·ª≠ d·ª•ng m·∫£ng `selectedServices`
                allowClear
                style={{ width: "100%", marginBottom: 10 }}
                optionFilterProp="children"
                showSearch
            >
                {data.map((time) => (
                    <Option key={time.id} value={time.id}>
                        {time.times}
                    </Option>
                ))}
            </Select>
        </Form.Item>
    );
};